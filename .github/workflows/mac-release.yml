name: Release MacOS.

on: [push]

jobs:

  check:
    if: "!(contains(github.event.head_commit.message, '[skip ci]'))"
    name: Parse parameters
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.parse.outputs.build }}
      ref: ${{ steps.parse.outputs.ref }}
      update: ${{ steps.parse.outputs.update }}
      packer: ${{ steps.parse.outputs.packer }}
      telegram: ${{ steps.parse.outputs.telegram }}
      description: ${{ steps.parse.outputs.description }}
      cache: ${{ steps.parse.outputs.cache }}

    steps:
      - name: Clone scripts.
        uses: actions/checkout@v2
      - name: Parse commit description
        id: parse
        uses: actions/github-script@0.9.0
        with:
          script: |
            const path = require('path');
            const currentBuild = "mac";
            const scriptPath = path.resolve('./scripts/option_parser.js');
            require(scriptPath)({github, context, currentBuild});

  build:
    name: Build on latest macOS
    needs: check
    if: needs.check.outputs.build == 'true'
    runs-on: macos-latest

    env:
      GIT: "https://github.com"
      PKG_CONFIG_PATH: /usr/local/ffmpeg/lib/pkgconfig
      CMAKE_LIBRARY_PATH: /usr/local/ffmpeg/lib
      OPENALDIR: /usr/local/opt/openal-soft
      OPENSSL_ROOT_DIR: /usr/local/opt/openssl@1.1
      Qt5_DIR: /usr/local/opt/qt/lib/cmake/Qt5
      ONLY_CACHE: "false"
      MANUAL_CACHING: "1"
      REPO_NAME: "kotatogram/kotatogram-desktop"
      AUTO_CACHING: "1"

    steps:
      - name: Clone.
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO_NAME }}
          submodules: recursive
          path: ${{ env.REPO_NAME }}
          ref: ${{ needs.check.outputs.ref }}

      - name: Clone scripts.
        uses: actions/checkout@v2
        with:
          path: buildscripts

      - name: Parse current version.
        shell: bash
        run: ./buildscripts/scripts/parse_version.sh

      - name: First set up.
        run: |
          brew install cmake dav1d meson openal-soft openssl opus nasm ninja pkg-config python qt yasm xz
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

          xcodebuild -version > CACHE_KEY.txt
          echo $MANUAL_CACHING >> CACHE_KEY.txt
          echo "$GITHUB_WORKSPACE" >> CACHE_KEY.txt
          if [ "$AUTO_CACHING" == "1" ]; then
            thisFile=buildscripts/.github/workflows/mac-release.yml
            echo `md5 -q $thisFile` >> CACHE_KEY.txt
          fi
          echo "CACHE_KEY=`md5 -q CACHE_KEY.txt`" >> $GITHUB_ENV

          echo /usr/local/opt/qt/bin >> $GITHUB_PATH

          mkdir -p Libraries/macos
          cd Libraries/macos
          echo "LibrariesPath=`pwd`" >> $GITHUB_ENV

      - name: Setting up updater keys.
        if: >
          needs.check.outputs.update
          && needs.check.outputs.packer
        env:
          PACKER_PRIVATE_KEY: ${{ secrets.PACKER_PRIVATE_KEY }}
          PACKER_PRIVATE_BETA_KEY: ${{ secrets.PACKER_PRIVATE_BETA_KEY }}
        run: python3 buildscripts/scripts/updater_keys.py

      - name: FFmpeg cache.
        id: cache-ffmpeg
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/ffmpeg-cache
          key: ${{ runner.OS }}-ffmpeg-${{ env.CACHE_KEY }}
      - name: FFmpeg build.
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath

          git clone --branch release/4.2 $GIT/FFmpeg/FFmpeg ffmpeg
          cd ffmpeg
          ./configure \
          --prefix=/usr/local/ffmpeg \
          --disable-debug \
          --disable-programs \
          --disable-doc \
          --disable-network \
          --disable-autodetect \
          --disable-everything \
          --disable-iconv \
          --enable-audiotoolbox \
          --enable-videotoolbox \
          --enable-libdav1d \
          --enable-libopus \
          --enable-protocol=file \
          --enable-hwaccel=h264_videotoolbox \
          --enable-hwaccel=hevc_videotoolbox \
          --enable-hwaccel=mpeg1_videotoolbox \
          --enable-hwaccel=mpeg2_videotoolbox \
          --enable-hwaccel=mpeg4_videotoolbox \
          --enable-decoder=aac \
          --enable-decoder=aac_at \
          --enable-decoder=aac_fixed \
          --enable-decoder=aac_latm \
          --enable-decoder=aasc \
          --enable-decoder=alac \
          --enable-decoder=alac_at \
          --enable-decoder=flac \
          --enable-decoder=gif \
          --enable-decoder=h264 \
          --enable-decoder=hevc \
          --enable-decoder=libdav1d \
          --enable-decoder=mp1 \
          --enable-decoder=mp1float \
          --enable-decoder=mp2 \
          --enable-decoder=mp2float \
          --enable-decoder=mp3 \
          --enable-decoder=mp3adu \
          --enable-decoder=mp3adufloat \
          --enable-decoder=mp3float \
          --enable-decoder=mp3on4 \
          --enable-decoder=mp3on4float \
          --enable-decoder=mpeg4 \
          --enable-decoder=msmpeg4v2 \
          --enable-decoder=msmpeg4v3 \
          --enable-decoder=opus \
          --enable-decoder=pcm_alaw \
          --enable-decoder=pcm_alaw_at \
          --enable-decoder=pcm_f32be \
          --enable-decoder=pcm_f32le \
          --enable-decoder=pcm_f64be \
          --enable-decoder=pcm_f64le \
          --enable-decoder=pcm_lxf \
          --enable-decoder=pcm_mulaw \
          --enable-decoder=pcm_mulaw_at \
          --enable-decoder=pcm_s16be \
          --enable-decoder=pcm_s16be_planar \
          --enable-decoder=pcm_s16le \
          --enable-decoder=pcm_s16le_planar \
          --enable-decoder=pcm_s24be \
          --enable-decoder=pcm_s24daud \
          --enable-decoder=pcm_s24le \
          --enable-decoder=pcm_s24le_planar \
          --enable-decoder=pcm_s32be \
          --enable-decoder=pcm_s32le \
          --enable-decoder=pcm_s32le_planar \
          --enable-decoder=pcm_s64be \
          --enable-decoder=pcm_s64le \
          --enable-decoder=pcm_s8 \
          --enable-decoder=pcm_s8_planar \
          --enable-decoder=pcm_u16be \
          --enable-decoder=pcm_u16le \
          --enable-decoder=pcm_u24be \
          --enable-decoder=pcm_u24le \
          --enable-decoder=pcm_u32be \
          --enable-decoder=pcm_u32le \
          --enable-decoder=pcm_u8 \
          --enable-decoder=pcm_zork \
          --enable-decoder=vorbis \
          --enable-decoder=wavpack \
          --enable-decoder=wmalossless \
          --enable-decoder=wmapro \
          --enable-decoder=wmav1 \
          --enable-decoder=wmav2 \
          --enable-decoder=wmavoice \
          --enable-encoder=libopus \
          --enable-parser=aac \
          --enable-parser=aac_latm \
          --enable-parser=flac \
          --enable-parser=h264 \
          --enable-parser=hevc \
          --enable-parser=mpeg4video \
          --enable-parser=mpegaudio \
          --enable-parser=opus \
          --enable-parser=vorbis \
          --enable-demuxer=aac \
          --enable-demuxer=flac \
          --enable-demuxer=gif \
          --enable-demuxer=h264 \
          --enable-demuxer=hevc \
          --enable-demuxer=m4v \
          --enable-demuxer=mov \
          --enable-demuxer=mp3 \
          --enable-demuxer=ogg \
          --enable-demuxer=wav \
          --enable-muxer=ogg \
          --enable-muxer=opus

          make -j$(sysctl -n hw.logicalcpu)
          sudo make DESTDIR="$LibrariesPath/ffmpeg-cache" install
          cd ..
          rm -rf ffmpeg
      - name: FFmpeg install.
        run: |
          cd $LibrariesPath
          sudo cp -R ffmpeg-cache/. /

      - name: WebRTC cache.
        id: cache-webrtc
        uses: actions/cache@v2
        with:
          path: ${{ env.LibrariesPath }}/tg_owt
          key: ${{ runner.OS }}-webrtc-${{ env.CACHE_KEY }}
      - name: WebRTC.
        if: steps.cache-webrtc.outputs.cache-hit != 'true'
        run: |
          cd $LibrariesPath

          git clone --recursive --depth=1 $GIT/desktop-app/tg_owt.git
          cd tg_owt

          cmake -B build . \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DTG_OWT_PACKAGED_BUILD_FFMPEG_STATIC=ON

          cmake --build build -j$(sysctl -n hw.logicalcpu)

      - name: Kotatogram Desktop build.
        if: env.ONLY_CACHE == 'false'
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          tg_owt_DIR: ${{ env.LibrariesPath }}/tg_owt/build
        run: |
          cd $REPO_NAME/Telegram

          UPDDEFINE="OFF"
          ${{ needs.check.outputs.update }} || UPDDEFINE="ON"

          PACKERDEFINE="ON"
          ${{ needs.check.outputs.packer }} || PACKERDEFINE="OFF"

          ./configure.sh \
          -DCMAKE_FIND_FRAMEWORK=LAST \
          -DTDESKTOP_API_ID=${API_ID} \
          -DTDESKTOP_API_HASH=${API_HASH} \
          -DDESKTOP_APP_DISABLE_AUTOUPDATE=${UPDDEFINE} \
          -DKTGDESKTOP_ENABLE_PACKER=${PACKERDEFINE} \
          -DDESKTOP_APP_USE_PACKAGED_LAZY=ON \
          -DDESKTOP_APP_USE_PACKAGED_FFMPEG_STATIC=ON

          cmake --build ../out --config Release

          cd ../out/Release
          macdeployqt Kotatogram.app
          codesign --remove-signature Kotatogram.app

          tag_name=${{ needs.check.outputs.display_version }}
          artifact_name=${{ env.VERSION_STR }}.dmg
          echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV

          mkdir dmgsrc
          mv Kotatogram.app dmgsrc
          hdiutil create -volname Kotatogram -srcfolder dmgsrc -ov -format UDZO $artifact_name

      - name: Upload artifact.
        if: env.ONLY_CACHE == 'false'
        uses: actions/upload-artifact@v2
        with:
          path: ./${{ env.REPO_NAME }}/out/Release/${{ env.ARTIFACT_NAME }}
          name: Binary

      - name: Install dependencies for Telegram uploader.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        run: |
          python3 -m pip install telethon cryptg

      - name: Upload binary to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.telegram == 'true'
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python3 buildscripts/scripts/uploader.py
          "@ktgbuilds"
          "${{ env.REPO_NAME }}/out/Release/${{ env.ARTIFACT_NAME }}"
          "${{ needs.check.outputs.description }}"

      - name: Package update.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        run: |
          cd $REPO_NAME

          ./out/Release/Packer -version ${{ env.VERSION_NUM }}${{ env.PACKER_BETA }} \
          -path out/Release/dmgsrc/Kotatogram.app \
          -target mac

          tar -caf tmacupd${{ env.VERSION_NUM }}.tar.xz tmacupd${{ env.VERSION_NUM }}
          echo ""UPDATE_FILE=tmacupd${{ env.VERSION_NUM }}"" >> $GITHUB_ENV

      - name: Upload update artifact.
        uses: actions/upload-artifact@v2
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
        with:
          path: ./${{ env.REPO_NAME }}/${{ env.UPDATE_FILE }}
          name: Update file

      - name: Upload update to Telegram.
        if: >
          env.ONLY_CACHE == 'false'
          && needs.check.outputs.update == 'true'
          && needs.check.outputs.packer == 'true'
          && needs.check.outputs.telegram == 'true'
        env:
          TELETHON_API_ID: ${{ secrets.TELETHON_API_ID }}
          TELETHON_API_HASH: ${{ secrets.TELETHON_API_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
        run: >
          python3 buildscripts/scripts/uploader.py
          "@ktghbcfiles"
          "${{ env.REPO_NAME }}/${{ env.UPDATE_FILE }}"
          "${{ needs.check.outputs.description }}"
